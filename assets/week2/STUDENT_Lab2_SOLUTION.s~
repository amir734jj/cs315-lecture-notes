###########################################################
#       Lab 2
#   Name:
#   Date:
#
#   TODO:
#       Write a program that asks user to input a height and
#       width. Then program computes the area of a right triangle
#       and displays the result. Only two prompts is needed in
#       this program.
#
#       * After finishing the calculations and testing the code,
#       then add basic input validation to input values to make sure
#       both numbers are greater than zero.
#
#   Note:
#       1. Remember to fill in the register usage section.
#       2. Remember that remainder of division of any number by 2
#       is either 0 or 1. Therefore, fractional part of result is either,
#       ".0" or ".5" respectively.
#
###########################################################
#       Register Usage
#   $t0     Holds height value
#   $t1     Holds width value
#   $t2     Holds height * width    | Holds quotient of (height * width) / 2
#   $t3     Holds remainder of (height * width) / 2
#   $t4
#   $t5
#   $t6
#   $t7
#   $t8
#   $t9     Holds constant value 2
###########################################################
        .data
prompt_height_p:    .asciiz "Enter a height value (greater than zero): "
prompt_width_p:     .asciiz "Enter a width value (greater than zero): "
area_triangle_p:    .asciiz "Area of right triangle is: "
zero_label_p:       .asciiz ".0"
half_label_p:       .asciiz ".5"
newline_p:          .asciiz "\n"
###########################################################
        .text
main:

height_prompt:
    li $v0, 4               # print prompt for height
    la $a0, prompt_height_p
    syscall

    li $v0, 5               # read height value
    syscall

    blez $v0, height_prompt # branch back to prompt if height value is less than or equal to zero
                            # continue executing instructions if height value is greater than zero

    move $t0, $v0           # copy height value into register $t0

width_prompt:
    li $v0, 4               # print prompt for width
    la $a0, prompt_width_p
    syscall

    li $v0, 5               # read width value
    syscall

    blez $v0, width_prompt  # branch back to prompt if width value is less than or equal to zero
                            # continue executing instructions if width_prompt value is greater than zero

    move $t1, $v0           # copy width value into register $t0

# area of right triangle
    li $v0, 4               # print area is for right triangle:
    la $a0, area_triangle_p
    syscall

    li $t9, 2               # put value 2 into register $t9

    mult $t0, $t1           # multiply height by width
    mflo $t2                # put the result into register $t2

    div $t2, $t9            # divide the result by 2
    mflo $t2                # put quotient into register $t2
    mfhi $t3                # put remainder into register $t3

    li $v0, 1               # print the result without fraction
    move $a0, $t2
    syscall

    beq $t3, $zero, zero_remainder  # branch based on remainder
                                    # if remainder is 0, then print ".0"
                                    # else print "0.5"
non_zero_remainder:
    li $v0, 4               # print 0.5 string
    la $a0, half_label_p
    syscall

    b exit                  # branch unconditionally to terminate program

zero_remainder:
    li $v0, 4               # print 0.0 string
    la $a0, zero_label_p
    syscall

exit:
    li $v0, 10              # exit
    syscall
###########################################################
