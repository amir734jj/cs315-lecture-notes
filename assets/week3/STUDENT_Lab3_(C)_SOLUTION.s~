###########################################################
#       Lab 3 - Part C
#   Name:
#   Date:
#
#   Description:
#       This program reads series of temperature values greater than -40 (exclusive,
#       so -40 is invalid temperature) and less than 140 (inclusive, so 140 is a valid
#       tempereture) and will stop reading when -1 is entered. if invalid temperature
#       is entered then program prints an error message and rejects the number. in
#       the end print the sum and count and also save the sum and count into static
#       integer variables: sum_p and count_p
#
#   *** modify part (C) to add saving sum and count into static varibles sum_p and count_p
#
#   Sample run:
#       Enter a value greater than -40 and less than or equal to 140 (-1 to stop): -40
#       Invalid entry
#       Enter a value greater than -40 and less than or equal to 140 (-1 to stop): 140
#       Enter a value greater than -40 and less than or equal to 140 (-1 to stop): 5
#       Enter a value greater than -40 and less than or equal to 140 (-1 to stop): -1
#       Sum: 145
#       Count: 2
#
###########################################################
#       Register Usage
#   $t0     Holds the sum
#   $t1     Holds the count
#   $t2     Holds value -1
#   $t3     Holds value -40
#   $t4     Holds value 140
###########################################################
        .data
prompt_p:   .asciiz "Enter a value greater than -40 and less than or equal to 140 (-1 to stop): "
sum_p:      .asciiz "Sum: "
count_p:    .asciiz "Count: "
invalid_p:  .asciiz "Invalid entry\n"

nextline_p: .asciiz "\n"    # \n

sum_var_p:      .word 0         # initialize static variable sum_p to zero
count_var_p:    .word 0         # initialize static variable count_p to zero
###########################################################
        .text
main:
    li $t0, 0               # initialize sum of the numbers
    li $t1, 0               # initialize count of the numbers
    li $t2, -1              # holds value -1
    li $t3, -40             # holds constant value -40
    li $t4, 140             # holds constant value 140
    
loop:
    li $v0, 4               # prompts to enter a value
    la $a0, prompt_p
    syscall
    
    li $v0, 5               # reads a value from console
    syscall
    
    beq $v0, $t2, exit_loop # branch to the exit_loop if value is -1
    
    ble $v0, $t3, error     # branch to the error if value if less or equal to
                            # -40 (pay attention to the order or branches)
        
    bgt $v0, $t4, error     # branch to error if value is greater than 140
                                
    add $t0, $t0, $v0       # adds the number with total
    addiu $t1, $t1, 1       # increment the count by one
    
    b no_error              # branch unconditionally to no_error label to
                            # skip printing error massage for value >= 0 case
    
error:
    li $v0, 4               # prints an error message
    la $a0, invalid_p
    syscall
    
no_error:
    b loop                  # branch unconditionally to the beginning of the loop
    
exit_loop:
    li $v0, 4               # prints the sum is:
    la $a0, sum_p
    syscall

    li $v0, 1               # prints the value of sum
    move $a0, $t0
    syscall

    la $a0, nextline_p      # prints nextline character
    li $v0, 4
    syscall
    
    li $v0, 4               # prints the count is:
    la $a0, count_p
    syscall

    li $v0, 1               # prints the value of count
    move $a0, $t1
    syscall
    
# store sum and count into static varible
    la $t9, sum_p           # load address of static variable sum_p into $t9
    sw $t0, 0($t9)          # memory[$t9 + 0] <-- $t0

    la $t9, count_p         # load address of static variable count_p into $t9
    sw $t1, 0($t9)          # memory[$t9 + 0] <-- $t1
    
mainEnd:
    li $v0, 10
    syscall                 # Halt
###########################################################
